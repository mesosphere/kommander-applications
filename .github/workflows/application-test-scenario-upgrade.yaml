name: Application Specific Test Scenario
on:
  workflow_dispatch:
    inputs:
      app:
        description: 'The kommander application to test, e.g. reloader,kube-prometheus-stack'
        required: true
        type: string
      from_version_ref:
        description: 'The NKP version(git branch or tag) version to upgrade from. e.g., v2.7.0-dev'
        required: true
        type: string
      to_version_ref:
        description: 'The NKP version(git branch or tag) to run upgrade to. Using latest version by default e.g., v2.8.0-dev'
        required: true
        type: string
  workflow_call:
    inputs:
      app:
        description: 'The kommander application to test, e.g. reloader,kube-prometheus-stack'
        required: true
        type: string
      from_version_ref:
        description: 'The NKP version(git branch or tag) version to upgrade from. e.g., v2.7.0-dev'
        required: true
        type: string
      to_version_ref:
        description: 'The NKP version(git branch or tag) to run upgrade to. Using latest version by default e.g., v2.8.0-dev'
        required: true
        type: string
env:
  UPGRADE_KAPPS_REPO_PATH: '.work/upgrade/kommander-applications'

jobs:

  validate-upgrade-versions:
    name: Validate Upgrade Versions
    if: ${{ github.event_name }} == 'workflow_dispatch'
    runs-on:
      - ubuntu-latest

    steps:
    - name: Install GH CLI
      uses: dev-hanz-ops/install-gh-cli-action@v0.1.0

    - name: Install GH CLI extension
      run: gh extension install mesosphere/gh-dkp
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.MESOSPHERECI_USER_TOKEN }}

    - name: Validate upgrade versions
      if: ${{ github.event_name }} == 'workflow_dispatch'
      run: |
        if [[ ${{ github.event.inputs.from_version_ref }} != release-* || ${{ github.event.inputs.from_version_ref }} != v* ]]; then
          echo "from_version_ref is not a release tag or branch: ${{ github.event.inputs.from_version_ref }}"
          exit 1
        else if [[ ${{ github.event.inputs.to_version_ref }} != release-* || ${{ github.event.inputs.to_version_ref }} != v* ]]; then
          echo "to_version_ref is not a release tag or branch: ${{ github.event.inputs.to_version_ref }}"
          exit 1
        fi

        from_versions_gh_dkp=""
        to_versions_gh_dkp=""
        if [[ ${{ github.event.inputs.from_version_ref }} == release-* ]]; then
          dkp_ver_majorminor=$(echo ${{ from_version_ref }} | cut -d '-' -f 2)
          from_versions_gh_dkp="v$dkp_ver_majorminor"
        else
          from_versions_gh_dkp=${{ github.event.inputs.from_version_ref }}
        fi

        if [[ ${{ github.event.inputs.to_version_ref }} == release-* ]]; then
          dkp_ver_majorminor=$(echo ${{ to_version_ref }} | cut -d '-' -f 2)
          to_versions_gh_dkp="v$dkp_ver_majorminor"
        else
          to_versions_gh_dkp=${{ github.event.inputs.to_version_ref }}
        fi

        upgrade_path=$(gh dkp generate upgrade-matrix --json | jq -c ' .upgrades | map(select(.to | startswith("v2.8"))) | map(select(.from | startswith("v2.6.1")))  | map(. | .from)')
        # TODO: test this
        if [[ -z $upgrade_path ]]; then
          echo "Upgrade path not found from ${{ github.event.inputs.from_version_ref }} to ${{ github.event.inputs.to_version_ref }}"
          exit 1
        fi

  run-test-scenario:
    runs-on:
      - ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.to_version_ref }}

    - name: Checkout previous version of k-apps
      uses: actions/checkout@v4
      with:
        path: apptests/${{env.UPGRADE_KAPPS_REPO_PATH}}
        ref: ${{ inputs.from_version_ref }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'apptests/go.mod'

    - name: Install Ginkgo
      working-directory: apptests
      run: go install github.com/onsi/ginkgo/v2/ginkgo

    - name: Run ${{ github.event.inputs.app }} upgrade Test
      working-directory: apptests
      run: |
        ginkgo --label-filter="upgrade && ${{ inputs.app }}" appscenarios
