name: Application Specific Test
on:
  workflow_dispatch:
    inputs:
      scenario:
        description: 'The scenario to run, e.g., install or upgrade'
        required: true
        default: 'install'
        type: string
  pull_request:
    types: [synchronize, labeled]
  push:
    branches:
      - main

jobs:
  setup-pr:
    name: Extract app names from PR Labels
    runs-on:
      - ubuntu-latest
    if: github.event_name == 'pull_request' && contains(join(github.event.pull_request.labels.*.name, ' '), 'services/')

    outputs:
      apps: ${{ steps.pr-labels.outputs.apps }}

    steps:
      - name: Collect apps to run tests from PR labels
        id: pr-labels
        run: |
          # Extract labels from the pull request event payload
          PR_LABELS=$(echo "${{ join(github.event.pull_request.labels.*.name, ' ') }}")
          KAPP_NAMES=()
          for label in $PR_LABELS; do
            echo $label
            if [[ "$label" == "services/"* ]]; then
              KAPP_NAMES+=("$(echo "$label" | cut -d '/' -f 2)")
            fi
          done
          json_array=$(printf '%s\n' "${KAPP_NAMES[@]}" | jq -R . | jq -c -s .)
          echo "apps=${json_array}" >> $GITHUB_OUTPUT

  setup-all-apps:
    name: Extract app names from local repo
    runs-on:
      - ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'

    outputs:
      apps: ${{ steps.local-apps.outputs.apps }}

    steps:
      # manually trigger ALL scenarios for ALL apps
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Collect apps from local directory
        id: local-apps
        working-directory: services
        run: |
          json_array=$(find . -type d -maxdepth 1 -mindepth 1 -exec basename {} \; | jq -R . | jq -c -s .)
          echo "apps=${json_array}" >> $GITHUB_OUTPUT

  trigger-tests-pr:
    needs: setup-pr
    uses: ./.github/workflows/application-test-scenario.yaml
    strategy:
      fail-fast: false
      matrix:
        scenario: [install, upgrade]
        app: ${{ fromJson(needs.setup-pr.outputs.apps) }}
    with:
      scenario: ${{ matrix.scenario }}
      app: ${{ matrix.app }}
    secrets: inherit

  trigger-tests-all-apps-install:
    needs: setup-all-apps
    uses: ./.github/workflows/application-test-scenario.yaml
    strategy:
      fail-fast: false
      matrix:
        scenario: [install]
        app: ${{ fromJson(needs.setup-all-apps.outputs.apps) }}
    with:
      scenario: ${{ matrix.scenario }}
      app: ${{ matrix.app }}

  trigger-tests-all-apps-upgrade:
    needs: setup-all-apps
    uses: ./.github/workflows/application-test-scenario.yaml
    strategy:
      fail-fast: false
      matrix:
        scenario: [ upgrade ]
        app: ${{ fromJson(needs.setup-all-apps.outputs.apps) }}
    with:
      scenario: ${{ matrix.scenario }}
      app: ${{ matrix.app }}
