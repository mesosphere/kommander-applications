apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: git-operator
    app.kubernetes.io/instance: git-operator-system
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: namespace
    app.kubernetes.io/part-of: git-operator
    control-plane: git-operator-controller-manager
  name: ${NAMESPACE:=git-operator-system}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.2
  name: gitclaims.git.nutanix.com
spec:
  group: git.nutanix.com
  names:
    kind: GitClaim
    listKind: GitClaimList
    plural: gitclaims
    singular: gitclaim
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.path
      name: Path
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].message
      name: Status
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: GitClaim is the Schema for the gitclaims API.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: GitClaimSpec defines the desired state of GitClaim.
            properties:
              bootstrap:
                description: Bootstrap describes Git repository deployment
                properties:
                  ref:
                    description: Ref is the git reference to clone.
                    type: string
                  secretRef:
                    description: SecretRef is the reference to the secret with credentials
                      to access the repository.
                    properties:
                      name:
                        description: |-
                          Name of the referent.
                          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  url:
                    description: URL is the URL of the git repository.
                    type: string
                required:
                - url
                type: object
                x-kubernetes-validations:
                - message: bootstrap.url is immutable
                  rule: self.url == oldSelf.url
                - message: bootstrap.ref is immutable
                  rule: self.ref == oldSelf.ref
            type: object
          status:
            description: GitClaimStatus defines the observed state of GitClaim.
            properties:
              conditions:
                description: Conditions holds the conditions for the GitClaim.
                items:
                  description: Condition contains details for one aspect of the current
                    state of this API Resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              path:
                description: Path
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.2
  name: gitclaimusers.git.nutanix.com
spec:
  group: git.nutanix.com
  names:
    kind: GitClaimUser
    listKind: GitClaimUserList
    plural: gitclaimusers
    singular: gitclaimuser
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.gitClaimName
      name: GitClaim
      type: string
    - jsonPath: .status.secretName
      name: Secret
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: GitClaimUser represents a user of a git repository managed by
          a GitClaim.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: GitClaimUserSpec defines user's permissions to access a git
              repository.
            properties:
              allowWrite:
                description: |-
                  Defines whether the user is allowed write access to the repo.
                  By default, the access is read only.
                type: boolean
              gitClaimName:
                description: |-
                  Name of the GitClaim object in the same namespace of `GitClaim` which controls the repository.
                  Clients should treat it as immutable.

                  While modifying `GitClaimName` should not result in an incorrect behavior when the API server allows it,
                  future versions of `git-operator` will only run on K8s clusters where this validation is obligatory.
                type: string
                x-kubernetes-validations:
                - message: GitClaimName is immutable
                  rule: self == oldSelf
            required:
            - gitClaimName
            type: object
          status:
            description: GitClaimUserStatus observes the state of GitClaimUser.
            properties:
              secretName:
                description: Name of the secret with a password for accessing the
                  repository
                type: string
              secretResourceVersion:
                description: |-
                  SecretResourceVersion is the last ResourceVersion at which the credentials secret
                  has been modified by Git Operator.
                  This field can be used to watch GitClaimUser's status for changes of credentials.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: git-operator-admin-credentials-rotate
  namespace: ${NAMESPACE:=git-operator-system}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: git-operator
    app.kubernetes.io/instance: git-operator-controller-manager-sa
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/part-of: git-operator
  name: git-operator-controller-manager
  namespace: ${NAMESPACE:=git-operator-system}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: git-operator-admin-credentials-rotate
  namespace: ${NAMESPACE:=git-operator-system}
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: git-operator
    app.kubernetes.io/instance: git-operator-leader-election-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: role
    app.kubernetes.io/part-of: git-operator
  name: git-operator-leader-election-role
  namespace: ${NAMESPACE:=git-operator-system}
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: git-operator-manager-role
  namespace: ${NAMESPACE:=git-operator-system}
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - services
  - secrets
  - persistentvolumeclaims
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cert-manager.io
  resources:
  - issuers
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: git-operator-custom-manager-role
rules:
- apiGroups:
  - cert-manager.io
  resources:
  - clusterissuers
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: git-operator-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - update
  - watch
- apiGroups:
  - git.nutanix.com
  resources:
  - gitclaims
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - git.nutanix.com
  resources:
  - gitclaims/finalizers
  - gitclaimusers/finalizers
  verbs:
  - update
- apiGroups:
  - git.nutanix.com
  resources:
  - gitclaims/status
  - gitclaimusers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - git.nutanix.com
  resources:
  - gitclaimusers
  verbs:
  - get
  - list
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: git-operator
    app.kubernetes.io/instance: git-operator-metrics-reader
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: git-operator
  name: git-operator-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: git-operator
    app.kubernetes.io/instance: git-operator-proxy-role
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrole
    app.kubernetes.io/part-of: git-operator
  name: git-operator-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: git-operator-admin-credentials-rotate
  namespace: ${NAMESPACE:=git-operator-system}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: git-operator-admin-credentials-rotate
subjects:
- kind: ServiceAccount
  name: git-operator-admin-credentials-rotate
  namespace: ${NAMESPACE:=git-operator-system}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: git-operator
    app.kubernetes.io/instance: git-operator-leader-election-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: rolebinding
    app.kubernetes.io/part-of: git-operator
  name: git-operator-leader-election-rolebinding
  namespace: ${NAMESPACE:=git-operator-system}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: git-operator-leader-election-role
subjects:
- kind: ServiceAccount
  name: git-operator-controller-manager
  namespace: ${NAMESPACE:=git-operator-system}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: git-operator
    app.kubernetes.io/instance: git-operator-manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: git-operator
  name: git-operator-manager-rolebinding
  namespace: ${NAMESPACE:=git-operator-system}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: git-operator-manager-role
subjects:
- kind: ServiceAccount
  name: git-operator-controller-manager
  namespace: ${NAMESPACE:=git-operator-system}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: git-operator
    app.kubernetes.io/instance: git-operator-manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: git-operator
  name: git-operator-custom-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: git-operator-custom-manager-role
subjects:
- kind: ServiceAccount
  name: git-operator-controller-manager
  namespace: ${NAMESPACE:=git-operator-system}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: git-operator
    app.kubernetes.io/instance: git-operator-manager-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: git-operator
  name: git-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: git-operator-manager-role
subjects:
- kind: ServiceAccount
  name: git-operator-controller-manager
  namespace: ${NAMESPACE:=git-operator-system}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: git-operator
    app.kubernetes.io/instance: git-operator-proxy-rolebinding
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/part-of: git-operator
  name: git-operator-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: git-operator-proxy-role
subjects:
- kind: ServiceAccount
  name: git-operator-controller-manager
  namespace: ${NAMESPACE:=git-operator-system}
---
apiVersion: v1
data:
  nginx.conf: |
    events {
        worker_connections  1024;
    }

    worker_processes        4;
    pid                     /tmp/nginx.pid;

    http {
        include               /etc/nginx/mime.types;
        default_type          application/octet-stream;

        access_log            /dev/stdout;
        error_log             /dev/stderr;

        gzip                  on;

        client_body_temp_path /tmp/client_temp;
        proxy_temp_path       /tmp/proxy_temp_path;
        fastcgi_temp_path     /tmp/fastcgi_temp;
        uwsgi_temp_path       /tmp/uwsgi_temp;
        scgi_temp_path        /tmp/scgi_temp;

        # The values below should be in sync with pre-receive hook timeouts
        # and should be longer than the other one.
        keepalive_timeout 5m;
        send_timeout 5m;
        client_body_timeout 5m;
        client_header_timeout 5m;
        fastcgi_connect_timeout 5m;
        fastcgi_read_timeout 5m;
        fastcgi_send_timeout 5m;

        # The three `map` directives below are used to determine access mode
        # based on the combination of the last segment of the URI path
        # and the `service=...` query argument.
        map $$uri $$accessmode1 {
            default unknown;

            ~/git-receive-pack$$ write;
            ~/git-upload-pack$$ read;
        }

        map $$arg_service $$accessmode2 {
            default unknown;

            git-receive-pack write;
            git-upload-pack  read;
        }

        map $$accessmode1-$$accessmode2 $$accessmode {
            default forbidden;

            unknown-read read;
            read-unknown read;
            read-read    read; # Does not normally occur with git v2

            unknown-write write;
            write-unknown write;
            write-write   write; # Does not normally occur with git v2
        }

        server {
            server_name       _;
            listen 9443 ssl default_server;

            ssl_certificate /etc/nginx/tls/tls.crt;
            ssl_certificate_key /etc/nginx/tls/tls.key;

            location /healthz {
                default_type text/plain;
                return 200 'ok';
            }

            location /admin.git {
               auth_basic            "login to admin repository";
               auth_basic_user_file  /admin-creds/htpasswd-admin.txt;

               include /etc/nginx/fastcgi_params;
               fastcgi_catch_stderr "post-receive-hook-failure.git.nutanix.com";
               fastcgi_catch_stderr "hooks/post-receive died of signal";
               fastcgi_param SCRIPT_FILENAME     /usr/libexec/git-core/git-http-backend;
               fastcgi_param GIT_HTTP_EXPORT_ALL "";
               fastcgi_param GIT_PROJECT_ROOT    /volumes/admin;
               fastcgi_param PATH_INFO           $$uri;
               fastcgi_param REMOTE_USER         $$remote_user;
               fastcgi_pass 127.0.0.1:9000;
            }

            location /admin/snapshot/update {
               auth_basic            "login to admin endpoint";
               auth_basic_user_file  /admin-creds/htpasswd-admin.txt;

               proxy_pass http://127.0.0.1:8081/snapshot/update;
            }

            location / {
               default_type text/plain;
               return 404 'Not found';
            }
        }

        server {
            server_name       _;
            listen 8443 ssl default_server;

            ssl_certificate /etc/nginx/tls/tls.crt;
            ssl_certificate_key /etc/nginx/tls/tls.key;

            location /healthz {
                default_type text/plain;
                return 200 'ok';
            }

            # The [a-z0-9]([\\-\\.a-z0-9]*[a-z0-9]) regexp matches all possible Namespace/GitClaim names
            # (that is, "lowercase RFC1123 subdomain names"),
            # but does not match special path character combinations (".", "..", etc.)
            # This way, $namespace/$gitclaimname is safe to use for accessing basic auth user files on the local filesystem.
            location ~ ^/repositories(?<pathinfo>/(?<namespace>[a-z0-9]([\\-\\.a-z0-9]*[a-z0-9]))/(?<gitclaimname>[a-z0-9]([\\-\\.a-z0-9]*[a-z0-9]))\\.git/.*?)$ {

               auth_basic            "login to payload repository";
               auth_basic_user_file /volumes/admin-tmp/active-snapshot/htpasswds/$$namespace/$$gitclaimname/$$accessmode;

               include /etc/nginx/fastcgi_params;
               fastcgi_param SCRIPT_FILENAME     /usr/libexec/git-core/git-http-backend;
               fastcgi_param GIT_HTTP_EXPORT_ALL "";
               fastcgi_param GIT_PROJECT_ROOT    /volumes/git;
               fastcgi_param PATH_INFO           $$pathinfo;
               fastcgi_param REMOTE_USER         $$remote_user;
               fastcgi_pass 127.0.0.1:9000;
            }

            location / {
               default_type text/plain;
               return 404 'Not found';
            }
        }
    }
kind: ConfigMap
metadata:
  name: git-operator-nginx-conf
  namespace: ${NAMESPACE:=git-operator-system}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: kube-rbac-proxy
    app.kubernetes.io/created-by: git-operator
    app.kubernetes.io/instance: git-operator-controller-manager-metrics-service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: git-operator
    control-plane: git-operator-controller-manager
  name: git-operator-controller-manager-metrics-service
  namespace: ${NAMESPACE:=git-operator-system}
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: git-operator-controller-manager
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: git-operator-webserver-service
    app.kubernetes.io/name: git-operator
  name: git-operator-git
  namespace: ${NAMESPACE:=git-operator-system}
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  - name: https-admin
    port: 9443
    protocol: TCP
    targetPort: https-admin
  selector:
    app.kubernetes.io/instance: git-operator-webserver
    app.kubernetes.io/name: git-operator
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: git-operator-admin-volume
  namespace: ${NAMESPACE:=git-operator-system}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: git-operator-git-volume
  namespace: ${NAMESPACE:=git-operator-system}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: manager
    app.kubernetes.io/created-by: git-operator
    app.kubernetes.io/instance: git-operator-controller-manager
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: deployment
    app.kubernetes.io/part-of: git-operator
    control-plane: git-operator-controller-manager
  name: git-operator-controller-manager
  namespace: ${NAMESPACE:=git-operator-system}
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: git-operator-controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: git-operator-controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: quay.io/brancz/kube-rbac-proxy:v0.19.1
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        - --namespace=${NAMESPACE:=git-operator-system}
        image: docker.io/mesosphere/git-operator:v0.13.11
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      priorityClassName: system-cluster-critical
      securityContext:
        runAsNonRoot: true
      serviceAccountName: git-operator-controller-manager
      terminationGracePeriodSeconds: 10
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    secret.reloader.stakater.com/reload: git-operator-git-webserver-tls
  name: git-operator-git
  namespace: ${NAMESPACE:=git-operator-system}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: git-operator-webserver
      app.kubernetes.io/name: git-operator
  serviceName: git-operator-git
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: git-operator-webserver
        app.kubernetes.io/name: git-operator
    spec:
      containers:
      - image: docker.io/nginxinc/nginx-unprivileged:1.28.0-alpine
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 3
          periodSeconds: 3
        name: git-server-nginx
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        - containerPort: 9443
          name: https-admin
          protocol: TCP
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          tcpSocket:
            port: 8443
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /etc/nginx/nginx.conf
          name: nginx-conf
          readOnly: true
          subPath: nginx.conf
        - mountPath: /volumes/admin-tmp
          name: admin-tmp-volume
          readOnly: true
        - mountPath: /admin-creds
          name: htpasswd-admin
          readOnly: true
        - mountPath: /etc/nginx/tls
          name: tls
          readOnly: true
      - env:
        - name: GIT_VOLUME_PATH
          value: /volumes/git
        image: docker.io/mesosphere/gitwebserver:v0.13.11
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 3
          periodSeconds: 3
          tcpSocket:
            port: 9000
        name: git-server-fcgi
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /volumes/git
          name: git-volume
        - mountPath: /volumes/admin
          name: admin-volume
        - mountPath: /etc/secrets/git-operator
          name: age-private-key
          readOnly: true
      - command:
        - /usr/local/bin/gitsnapshot
        - --addr
        - :8081
        - --repo-url
        - file:///volumes/admin/admin.git
        - --repo-mirror-dir
        - /volumes/admin/mirror
        - --snapshots-dir
        - /volumes/admin-tmp/snapshots
        - --snapshot-symlink
        - /volumes/admin-tmp/active-snapshot
        image: docker.io/mesosphere/gitwebserver:v0.13.11
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /readyz
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 3
        name: gitsnapshot
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 3
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /volumes/admin
          name: admin-volume
        - mountPath: /volumes/admin-tmp
          name: admin-tmp-volume
      initContainers:
      - command:
        - /bin/bash
        - -c
        - chown 65532:65532 -R /volumes/git /volumes/admin
        image: docker.io/mesosphere/gitwebserver:v0.13.11
        name: change-permissions
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /volumes/admin
          name: admin-volume
        - mountPath: /volumes/git
          name: git-volume
      - command:
        - /bin/bash
        - -c
        - init-admin-repo.sh
        env:
        - name: ADMIN_REPO_PATH
          value: /volumes/admin/admin.git
        image: docker.io/mesosphere/gitwebserver:v0.13.11
        imagePullPolicy: IfNotPresent
        name: init-admin-repo
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /volumes/admin
          name: admin-volume
      priorityClassName: system-cluster-critical
      securityContext:
        fsGroup: 65532
        fsGroupChangePolicy: OnRootMismatch
        runAsUser: 65532
      volumes:
      - name: git-volume
        persistentVolumeClaim:
          claimName: git-operator-git-volume
      - name: admin-volume
        persistentVolumeClaim:
          claimName: git-operator-admin-volume
      - emptyDir:
          medium: Memory
          sizeLimit: 150Mi
        name: admin-tmp-volume
      - name: htpasswd-admin
        secret:
          secretName: htpasswd-admin
      - name: tls
        secret:
          secretName: git-operator-git-webserver-tls
      - configMap:
          items:
          - key: nginx.conf
            path: nginx.conf
          name: git-operator-nginx-conf
        name: nginx-conf
      - name: age-private-key
        secret:
          items:
          - key: privateKey
            path: age-private-key
          secretName: git-operator-age-keypair
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: git-operator-admin-credentials-rotate
  namespace: ${NAMESPACE:=git-operator-system}
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - args:
            - -c
            - |
              kubectl -n $NAMESPACE delete secret git-operator-admin-credentials
            command:
            - /bin/sh
            env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            image: docker.io/mesosphere/kubectl:v1.34.1
            name: admin-credentials-rotate
          priorityClassName: system-cluster-critical
          restartPolicy: OnFailure
          serviceAccountName: git-operator-admin-credentials-rotate
  schedule: 0 0 * * *
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: git-operator-ca
  namespace: ${NAMESPACE:=git-operator-system}
spec:
  commonName: git-operator-ca
  dnsNames:
  - git-operator-git.${NAMESPACE:=git-operator-system}
  - git-operator-git.${NAMESPACE:=git-operator-system}
  - git-operator-git.${NAMESPACE:=git-operator-system}
  duration: 87600h
  isCA: true
  issuerRef:
    kind: Issuer
    name: git-operator-selfsigned-issuer
  renewBefore: 720h
  secretName: git-operator-ca-keypair
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: git-operator-git-webserver
  namespace: ${NAMESPACE:=git-operator-system}
spec:
  commonName: git-operator-git
  dnsNames:
  - git-operator-git.${NAMESPACE:=git-operator-system}
  - git-operator-git.${NAMESPACE:=git-operator-system}.svc
  - git-operator-git.${NAMESPACE:=git-operator-system}.svc.cluster.local
  - localhost
  issuerRef:
    kind: Issuer
    name: git-operator-ca
  secretName: git-operator-git-webserver-tls
  usages:
  - server auth
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: git-operator-ca
  namespace: ${NAMESPACE:=git-operator-system}
spec:
  ca:
    secretName: git-operator-ca-keypair
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: git-operator-selfsigned-issuer
  namespace: ${NAMESPACE:=git-operator-system}
spec:
  selfSigned: {}
