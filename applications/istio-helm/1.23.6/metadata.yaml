schema: "catalog.nkp.nutanix.com/v1/application-metadata"
displayName: Istio-Helm Service Mesh
description: Open source service mesh that layers transparently onto existing distributed applications. Requires Prometheus.
category:
  - service-mesh
requiredDependencies:
  - kube-prometheus-stack
type: nkp-core-platform
scope:
  - workspace
certifications:
  - qualified
  - airgapped
licensing:
  - Pro
  - Ultimate
  - Essential
  - Enterprise
overview: |-
  # Overview
  Istio is an open platform for providing a uniform way to integrate microservices, manage traffic flow across microservices, enforce policies and aggregate telemetry data. Istio's control plane provides an abstraction layer over the underlying cluster management platform, such as Kubernetes, Mesos, etc. A large ecosystem of contributors, partners, integrations, and distributors extend and leverage Istio for a wide variety of scenarios. To use Istio, Prometheus needs to be deployed.

  This is a Helm-based installation of Istio that uses the official Istio Helm charts for deploying individual components (base, CNI, istiod, gateway).

  ## Key Features
  ### Secure Communication
  Secure service-to-service communication in a cluster with TLS encryption, strong identity-based authentication and authorization

  ### Automatic Load Balancing
  Automatic load balancing for HTTP, gRPC, WebSocket, and TCP traffic

  ### Rich Traffic and Routing Controls
  Fine-grained control of traffic behavior with rich routing rules, retries, failovers, and fault injection

  ### Flexible Service Access Control
  A pluggable policy layer and configuration API supporting access controls, rate limits and quotas

  ### Automatic Traffic Metrics and Logging
  Automatic metrics, logs, and traces for all traffic within a cluster, including cluster ingress and egress

  ## Ambient Mode Support
  
  This installation supports Istio Ambient Mesh mode, which provides a sidecar-less data plane option. Ambient mode moves the proxies out of the application pod and into the infrastructure, reducing operational complexity and resource overhead.
  
  ### Enabling Ambient Mode
  
  To enable ambient mode, you need to configure three components via ConfigMap overrides in `cm.yaml`:
  
  1. **Enable CNI Ambient Mode**:
  ```yaml
  cni:
    profile: ambient
    cni:
      ambient:
        enabled: true
  ```
  
  2. **Enable Istiod Ambient Mode**:
  ```yaml
  istiod:
    profile: ambient
    pilot:
      env:
        PILOT_ENABLE_AMBIENT: true
        PILOT_ENABLE_AMBIENT_CONTROLLERS: true
        PILOT_ENABLE_HBONE: true
        CA_TRUSTED_NODE_ACCOUNTS: "istio-helm-gateway-ns/ztunnel,kube-system/ztunnel"
  ```
  
  3. **Enable Ztunnel**:
  ```yaml
  ztunnel:
    enabled: true
    env:
      - name: ISTIOD_ADDR
        value: istiod-istio-helm.istio-helm-system.svc:15012
  ```
  
  ### Enrolling Workloads in Ambient Mode
  
  After enabling ambient mode, label namespaces to enroll them:
  ```bash
  kubectl label namespace <namespace-name> istio.io/dataplane-mode=ambient
  ```
  
  **Note**: Until ztunnel is enabled, ambient mode will not be active. All three components (CNI ambient, istiod ambient, and ztunnel) must be configured for ambient mode to function properly.
  
  ## More Information
  - [istio.io](https://istio.io/)
  - [Istio Documentation](https://istio.io/latest/docs/)
  - [Istio Ambient Mesh](https://istio.io/latest/docs/ambient/)
  - [Istio - GitHub](https://github.com/istio/community)
icon: PHN2ZyB3aWR0aD0iMjQiIGhlaWdodD0iMjQiIHZpZXdCb3g9IjAgMCAyNCAyNCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZD0iTTAgMEgyNFYyNEgwVjBaIiBmaWxsPSIjREFEREUyIi8+CjxwYXRoIGQ9Ik0wIDBIMjRWMjRIMFYwWiIgZmlsbD0iIzQ2NkJCMCIvPgo8cGF0aCBmaWxsLXJ1bGU9ImV2ZW5vZGQiIGNsaXAtcnVsZT0iZXZlbm9kZCIgZD0iTTE4LjIxNDMgMTguNjY2N0wxMC43ODEyIDE3LjgzMzNWMkwxOC4yMTQzIDE4LjY2NjdaTTUgMTguNjY2N0w5Ljk1NTM2IDE3LjgzMzNWOC42NjY2N0w1IDE4LjY2NjdaTTUgMTkuNUgxOC4yMTQzTDkuOTU1MzYgMjJMNSAxOS41WiIgZmlsbD0id2hpdGUiLz4KPC9zdmc+Cg==
