apiVersion: v1
kind: ConfigMap
metadata:
  name: ${releaseName}-storage-config-defaults
  namespace: ${releaseNamespace}
data:
  # Overrides for kubecost to run in primary mode (single cluster with no object storage)
  primary-values.yaml: |
    global:
      notifications:
        alertmanager:
          # If true, allow kubecost to write to alertmanager
          enabled: true

    federatedETL:
      federatedCluster: false
      agentOnly: false

    kubecostModel:
      federatedStorageConfigSecret: ""

    kubecostAggregator:
      # deployMethod determines how Aggregator is deployed. Current options are
      # "singlepod" (within cost-analyzer Pod) "statefulset" (separate
      # StatefulSet), and "disabled".
      deployMethod: singlepod
      persistentConfigsStorage:
        storageClass: ""  # default storage class
        storageRequest: 1Gi
      aggregatorDbStorage:
        storageClass: ""  # default storage class
        storageRequest: 32Gi
      cloudCost:
        # The cloudCost component of Aggregator depends on
        # kubecostAggregator.deployMethod:
        # kA.dM = "singlepod" -> cloudCost is run as container inside cost-analyzer
        # kA.dM = "statefulset" -> cloudCost is run as single-replica Deployment
        enabled: false
      # Log level for the aggregator container. Options are "trace", "debug", "info", "warn", "error", "fatal", "panic"
      logLevel: info
      resources:
        requests:
          cpu: 1000m
          memory: 1Gi
      jaeger:
        # Enable this to use jaeger for tracing, useful for debugging
        enabled: false
        image: jaegertracing/all-in-one
        imageVersion: 1.64.0 # Pin the image here to avoid pulling in latest as that would affect CVE scans

    kubecostFrontend:
      enabled: true
      deployMethod: singlepod # Other possible value is `haMode` that is supported only with enterprise license.
      ipv6:
        enabled: false

    # Define persistence volume for cost-analyzer, more information at https://github.com/kubecost/docs/blob/master/storage.md
    persistentVolume:
      # Upgrades from original default 0.2Gi may break if automatic disk resize is not supported
      # https://github.com/kubecost/cost-analyzer-helm-chart/issues/507
      size: 32Gi
      # Note that setting this to false means configurations will be wiped out on pod restart.
      enabled: true
      # storageClass: "-"

    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: kommander-traefik
        ingress.kubernetes.io/auth-response-headers: X-Forwarded-User
        traefik.ingress.kubernetes.io/router.tls: "true"
        traefik.ingress.kubernetes.io/router.middlewares: "${releaseNamespace}-forwardauth@kubernetescrd,${releaseNamespace}-stripprefixes@kubernetescrd"
      paths:
        - "/dkp/kommander/kubecost/frontend/" # This used to be the ingress of centralized-kubecost in 2.13.x and older versions of DKP
      hosts:
        - ""
      tls: []

    grafana:
      priorityClassName: dkp-high-priority
      sidecar:
        dashboards:
          enabled: true
          label: grafana_dashboard_kommander
          labelValue: 1
        datasources:
          enabled: true
          defaultDatasourceEnabled: false
          label: grafana_datasource_kommander

    kubecostProductConfigs:
      grafanaURL: "/dkp/kommander/monitoring/grafana"
  # Overrides for kubecost to create cosi resources.
  primary-cosi-values.yaml: |
    ---
    cosiBucketKit:
      enabled: true
      bucketClaims:
        - name: cosi-kubecost # Max length should be less than 26 chars.
          namespace: ${releaseNamespace}
          annotations:
            helm.sh/resource-policy: keep
          bucketClassName: cosi-ceph-nkp
          protocols:
            - s3
      bucketAccesses:
        - name: cosi-kubecost
          namespace: ${releaseNamespace}
          annotations:
            helm.sh/resource-policy: keep
          bucketAccessClassName: cosi-ceph-nkp
          bucketClaimName: cosi-kubecost
          protocol: s3
          credentialsSecretName: federated-store
      transformations:
        priorityClassName: dkp-high-priority
        kubectlImage: ${kubetoolsImageRepository:=bitnamilegacy/kubectl}:${kubetoolsImageTag:=1.33.2}
        kubecost:
          enabled: true
  # Overrides for kubecost to run in primary mode for multi cluster setup with object storage.
  primary-object-storage-ready-values.yaml: |
    ---
    kubecostAggregator:
      # deployMethod determines how Aggregator is deployed. Current options are
      # "singlepod" (within cost-analyzer Pod) "statefulset" (separate
      # StatefulSet), and "disabled".
      deployMethod: statefulset
    federatedETL:
      federatedCluster: true
    kubecostModel:
      federatedStorageConfigSecret: "federated-store" # Secret should have a key named "federated-store.yaml" with the federated storage credentials
