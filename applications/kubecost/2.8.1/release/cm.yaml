apiVersion: v1
kind: ConfigMap
metadata:
  name: ${releaseName}-config-defaults
  namespace: ${releaseNamespace}
data:
  # Using just values.yaml will result in kubecost running in agent mode.
  values.yaml: |
    ---
    global:
      prometheus:
        enabled: true

      grafana:
        enabled: false # Cannot use grafana when federatedETL.agentOnly is true.
        proxy: false

      # Installs custom CA certificates onto Kubecost pods
      updateCaTrust:
        enabled: true
        caCertsSecret: tls-root-ca  # The name of the Secret containing custom CA certificates to mount to the cost-model container.

    forecasting:
      # Enable this to use kubecost's cost forecosting model
      enabled: false

    upgrade:
      toV2: false # TODO(takirala): Handle upgrades.

    federatedETL:
      federatedCluster: true
      agentOnly: true

    ingress:
      enabled: false

    kubecostModel:
      federatedStorageConfigSecret: "federated-store" # Secret should have a key named "federated-store.yaml" with the federated storage credentials

    kubecostAggregator:
      deployMethod: disabled
      priority:
        enabled: true
        name: dkp-high-priority

    priority:
      enabled: true
      name: dkp-high-priority

    prometheus:
      kubeStateMetrics:
        enabled: false
      kube-state-metrics:
        disabled: true

      extraScrapeConfigs: |
        - job_name: kubecost
          honor_labels: true
          scrape_interval: 1m
          scrape_timeout: 10s
          metrics_path: /metrics
          scheme: http
          dns_sd_configs:
          - names:
            - {{ .Release.Name }}-cost-analyzer
            type: 'A'
            port: 9003
        - job_name: kubecost-networking
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
          # Scrape only the the targets matching the following metadata
            - source_labels: [__meta_kubernetes_pod_label_app]
              action: keep
              regex: {{ .Release.Name }}-network-costs

      server:
        priorityClassName: dkp-high-priority
        retention: 14d
        fullnameOverride: "kubecost-prometheus-server"
        # If clusterIDConfigmap is defined, instead use user-generated configmap with key CLUSTER_ID
        # to use as unique cluster ID in kubecost cost-analyzer deployment.
        # This overrides the cluster_id set in prometheus.server.global.external_labels.
        # NOTE: This does not affect the external_labels set in prometheus config.
        clusterIDConfigmap: kubecost-cluster-info-configmap
        extraFlags:
          - web.enable-admin-api
          - web.enable-lifecycle
          - storage.tsdb.wal-compression
        resources:
          limits:
            cpu: 1000m
            memory: 2500Mi
          requests:
            cpu: 300m
            memory: 1500Mi
        global:
          scrape_interval: 1m
          scrape_timeout: 10s
          evaluation_interval: 1m
          external_labels:
            cluster_id: $CLUSTER_ID
        persistentVolume:
          size: 32Gi
          enabled: true
        extraArgs:
          log.level: info
          log.format: json
          storage.tsdb.min-block-duration: 2h
          storage.tsdb.max-block-duration: 2h
          query.max-concurrency: 1
          query.max-samples: 100000000
        enableAdminApi: true
        service:
          gRPC:
            enabled: true
      configmapReload:
        prometheus:
          enabled: true
        alertmanager:
          enabled: true
      alertmanager:
        fullnameOverride: "kubecost-prometheus-alertmanager"
        image:
          repository: quay.io/prometheus/alertmanager
          tag: v0.28.1
        priorityClassName: dkp-high-priority
        enabled: true
        resources:
          limits:
            cpu: 50m
            memory: 100Mi
          requests:
            cpu: 10m
            memory: 50Mi
        persistentVolume:
          enabled: true
      pushgateway:
        enabled: false
        persistentVolume:
          enabled: false
      serverFiles:
        alerts:
          groups:
            - name: Kubecost
              rules:
                - alert: kubecostDown
                  expr: up{job="kubecost"} == 0
                  annotations:
                    message: 'Kubecost metrics endpoint is not being scraped successfully.'
                  for: 10m
                  labels:
                    severity: warning
                - alert: kubecostMetricsUnavailable
                  expr: sum(sum_over_time(node_cpu_hourly_cost[5m])) == 0
                  annotations:
                    message: 'Kubecost metrics are not available in Prometheus.'
                  for: 10m
                  labels:
                    severity: warning
                - alert: kubecostRecordingRulesNotEvaluated
                  expr: avg_over_time(kubecost_cluster_memory_working_set_bytes[5m]) == 0
                  annotations:
                    message: 'Kubecost recording rules are not being successfully evaluated.'
                  for: 10m
                  labels:
                    severity: warning

    kubecostProductConfigs:
      clusterName: ""
      clusterProfile: production
      cloudIntegrationSecret: ""
      currencyCode: USD
      productKey:
        enabled: false
        #key: YOUR_KEY
