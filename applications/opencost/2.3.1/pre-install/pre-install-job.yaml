apiVersion: v1
kind: ServiceAccount
metadata:
  name: opencost-pre-install
  namespace: ${releaseNamespace}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: opencost-pre-install
  namespace: ${releaseNamespace}
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: opencost-pre-install-clusterrole
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: opencost-pre-install
  namespace: ${releaseNamespace}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: opencost-pre-install
subjects:
  - kind: ServiceAccount
    name: opencost-pre-install
    namespace: ${releaseNamespace}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: opencost-pre-install-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: opencost-pre-install-clusterrole
subjects:
  - kind: ServiceAccount
    name: opencost-pre-install
    namespace: ${releaseNamespace}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: opencost-pre-install
  namespace: ${releaseNamespace}
spec:
  template:
    metadata:
      name: opencost-pre-install
    spec:
      serviceAccountName: opencost-pre-install
      restartPolicy: OnFailure
      priorityClassName: dkp-high-priority
      containers:
        - name: create-opencost-cluster-info-configmap
          image: "${kubetoolsImageRepository:=bitnamilegacy/kubectl}:${kubetoolsImageTag:=1.33.2}"
          command:
            - bash
            - -c
            - |
              set -o nounset
              set -o errexit
              set -o pipefail

              echo() {
                command echo $(date) "$@"
              }

              echo "Checking for the existence of opencost-cluster-info-configmap..."
              # Skip if the configmap already exists and has a non empty CLUSTER_ID value.
              CURRENT_CLUSTER_ID=$(kubectl get configmap opencost-cluster-info-configmap -n kommander -o jsonpath='{.data.CLUSTER_ID}' 2>/dev/null || command echo "")
              if [ -n "$CURRENT_CLUSTER_ID" ]; then
                echo "CLUSTER_ID exists and is equal to $CURRENT_CLUSTER_ID."
                exit 0
              else
                echo "CLUSTER_ID is either missing or empty. Populating it..."
              fi
              kubectl create configmap opencost-cluster-info-configmap -n ${releaseNamespace} -oyaml --dry-run=client --save-config --from-literal=CLUSTER_ID=$(kubectl get namespace kube-system -o jsonpath="{.metadata.uid}") | kubectl apply -f -
