apiVersion: v1
kind: ServiceAccount
metadata:
  name: etcd-metrics-proxy
  namespace: ${releaseNamespace}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: etcd-metrics-proxy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: etcd-metrics-proxy
subjects:
  - kind: ServiceAccount
    name: etcd-metrics-proxy
    namespace: ${releaseNamespace}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: etcd-metrics-proxy
rules:
  - apiGroups: ["authentication.k8s.io"]
    resources:
      - tokenreviews
    verbs: ["create"]
  - apiGroups: ["authorization.k8s.io"]
    resources:
      - subjectaccessreviews
    verbs: ["create"]
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: etcd-metrics-proxy
  name: etcd-metrics-proxy
  namespace: ${releaseNamespace}
spec:
  ports:
    - name: https
      port: 8443
      targetPort: https
  selector:
    app: etcd-metrics-proxy
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: etcd-metrics-proxy
  namespace: ${releaseNamespace}
spec:
  selector:
    matchLabels:
      app: etcd-metrics-proxy
  template:
    metadata:
      labels:
        app: etcd-metrics-proxy
    spec:
      serviceAccountName: etcd-metrics-proxy
      priorityClassName: dkp-critical-priority
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      securityContext:
        runAsUser: 65532
        fsGroup: 65532
        runAsGroup: 65532
      initContainers:
        - name: init
          image: docker.io/library/busybox:1
          command: ["/bin/sh", "-c"]
          args:
            - >
              cp /etc/certs/etcd/ca.crt /etc/certs/etcd/healthcheck* /etc/kube-rbac-proxy/etcd/ && chown -R 65532:65532 /etc/kube-rbac-proxy/etcd

          securityContext:
            runAsUser: 0
            privileged: true
          volumeMounts:
            - name: etcd-certs
              mountPath: /etc/certs/etcd
              readOnly: true
            - name: etcd-certs-copy
              mountPath: /etc/kube-rbac-proxy/etcd
      containers:
        - name: kube-rbac-proxy
          image: quay.io/brancz/kube-rbac-proxy:v0.18.0
          args:
            - "--secure-listen-address=0.0.0.0:8443"
            - "--tls-cert-file=/etc/kube-rbac-proxy/tls/tls.crt"
            - "--tls-private-key-file=/etc/kube-rbac-proxy/tls/tls.key"
            - "--upstream=https://$(NODE_IP):$(ETCD_PORT)"
            - "--allow-paths=/metrics"
            - "--upstream-ca-file=/etc/kube-rbac-proxy/etcd/ca.crt"
            - "--upstream-client-cert-file=/etc/kube-rbac-proxy/etcd/healthcheck-client.crt"
            - "--upstream-client-key-file=/etc/kube-rbac-proxy/etcd/healthcheck-client.key"
            - "--v=7"
          ports:
            - containerPort: 8443
              name: https
          env:
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: ETCD_PORT
              value: "2379"
          volumeMounts:
            - name: tls-certs
              mountPath: /etc/kube-rbac-proxy/tls
              readOnly: true
            - name: etcd-certs-copy
              mountPath: /etc/kube-rbac-proxy/etcd
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
      volumes:
        - name: etcd-certs
          hostPath:
            path: /etc/kubernetes/pki/etcd
        - name: etcd-certs-copy
          emptyDir: {}
        - name: tls-certs
          secret:
            secretName: etcd-metrics-proxy-tls
